android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    java.lang.String getString(int) -> a
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void startActivity(android.content.Intent) -> a
    void startActivityForResult(android.content.Intent,int) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void registerForContextMenu(android.view.View) -> registerForContextMenu
    void unregisterForContextMenu(android.view.View) -> unregisterForContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    java.util.HashMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> e
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void startActivityFromFragment(android.support.v4.app.Fragment,android.content.Intent,int) -> a
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.i:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$2 -> android.support.v4.app.j:
    android.support.v4.app.FragmentActivity this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.k:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.l:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    java.util.HashMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.m:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.n:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.o:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.p:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.r:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.s:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.widget.FrameLayout mRealTabContent -> b
    android.content.Context mContext -> c
    android.support.v4.app.FragmentManager mFragmentManager -> d
    int mContainerId -> e
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> f
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> g
    boolean mAttached -> h
    void initFragmentTabHost(android.content.Context,android.util.AttributeSet) -> a
    void setup() -> setup
    void setup(android.content.Context,android.support.v4.app.FragmentManager,int) -> a
    void ensureContent() -> a
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void addTab(android.widget.TabHost$TabSpec,java.lang.Class,android.os.Bundle) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.u:
android.support.v4.app.FragmentTabHost$DummyTabFactory -> android.support.v4.app.v:
    android.content.Context mContext -> a
    android.view.View createTabContent(java.lang.String) -> createTabContent
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.w:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.x:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.y:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.z:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.aa:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.ab:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.ac:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.ad:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ae:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void gc() -> c
    int size() -> a
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> b
    int idealByteArraySize(int) -> c
    int idealIntArraySize(int) -> d
android.support.v4.view.GravityCompat -> android.support.v4.view.a:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.b:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.c:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.d:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.e:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.f:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.g:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.h:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.i:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.j:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.k:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.l:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.m:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.n:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.o:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.p:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.q:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.r:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.s:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.t:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.u:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.v:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.w:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.x:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.y:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.z:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.aa:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ab:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ac:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.ad:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.ae:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.af:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.ag:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.ah:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ai:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.aj:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void sortChildDrawingOrder() -> g
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.ak:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.al:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.am:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.an:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ao:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ap:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.aq:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.ar:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.as:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.at:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.au:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    int mMinDrawerMargin -> b
    int mScrimColor -> c
    float mScrimOpacity -> d
    android.graphics.Paint mScrimPaint -> e
    android.support.v4.widget.ViewDragHelper mLeftDragger -> f
    android.support.v4.widget.ViewDragHelper mRightDragger -> g
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> i
    int mDrawerState -> j
    boolean mInLayout -> k
    boolean mFirstLayout -> l
    int mLockModeLeft -> m
    int mLockModeRight -> n
    boolean mDisallowInterceptRequested -> o
    boolean mChildrenCanceledTouch -> p
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> q
    float mInitialMotionX -> r
    float mInitialMotionY -> s
    android.graphics.drawable.Drawable mShadowLeft -> t
    android.graphics.drawable.Drawable mShadowRight -> u
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewGravity(android.view.View) -> e
    boolean checkDrawerViewGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> c
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.a:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.b:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.c:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.d:
    int mGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.e:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.f:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.g:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.h:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.i:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.j:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> b
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.k:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.l:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.m:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.n:
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.o:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawable -> d
    int mOverhangSize -> e
    boolean mCanSlide -> f
    android.view.View mSlideableView -> g
    float mSlideOffset -> h
    float mParallaxOffset -> i
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mParallaxBy -> l
    float mInitialMotionX -> m
    float mInitialMotionY -> n
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.support.v4.widget.ViewDragHelper mDragHelper -> p
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    android.graphics.Rect mTmpRect -> s
    java.util.ArrayList mPostedRunnables -> t
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean hasOpaqueBackground(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.p:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.q:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.r:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.s:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.t:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.u:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.v:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.w:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.x:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.y:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    int getViewDragState() -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> a
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> e
    void ensureMotionHistorySizeForId(int) -> f
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> a
    void setDragState(int) -> b
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> c
    boolean checkTouchSlop(int,int) -> b
    boolean isEdgeTouched(int) -> d
    boolean isEdgeTouched(int,int) -> c
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> d
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> e
    int getEdgesTouched(int,int) -> f
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.z:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.aa:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
com.CarOCR.CarOCREngine -> com.CarOCR.CarOCREngine:
    void init() -> init
    void release() -> release
    int loadDiction(byte[],int) -> loadDiction
    int recogpageFile(java.lang.String,char[]) -> recogpageFile
    int recogpageFileSpeed(java.lang.String,char[]) -> recogpageFileSpeed
com.google.gson.annotations.Expose -> com.google.gson.annotations.Expose:
    boolean serialize() -> serialize
    boolean deserialize() -> deserialize
com.google.gson.annotations.SerializedName -> com.google.gson.annotations.SerializedName:
    java.lang.String value() -> value
com.google.gson.annotations.Since -> com.google.gson.annotations.Since:
    double value() -> value
com.google.gson.annotations.Until -> com.google.gson.annotations.Until:
    double value() -> value
com.lidroid.xutils.DbUtils -> com.lidroid.xutils.a:
    java.util.HashMap daoMap -> a
    android.database.sqlite.SQLiteDatabase database -> b
    com.lidroid.xutils.DbUtils$DaoConfig daoConfig -> c
    boolean debug -> d
    boolean allowTransaction -> e
    java.util.concurrent.locks.Lock writeLock -> f
    boolean writeLocked -> g
    com.lidroid.xutils.DbUtils$FindTempCache findTempCache -> h
    com.lidroid.xutils.DbUtils getInstance(com.lidroid.xutils.DbUtils$DaoConfig) -> a
    com.lidroid.xutils.DbUtils create(android.content.Context) -> a
    com.lidroid.xutils.DbUtils$DaoConfig getDaoConfig() -> a
    void saveOrUpdate(java.lang.Object) -> a
    void save(java.lang.Object) -> b
    void update(java.lang.Object,java.lang.String[]) -> a
    java.lang.Object findById(java.lang.Class,java.lang.Object) -> a
    java.lang.Object findFirst(com.lidroid.xutils.db.sqlite.Selector) -> a
    java.util.List findAll(com.lidroid.xutils.db.sqlite.Selector) -> b
    android.database.sqlite.SQLiteDatabase createDatabase(com.lidroid.xutils.DbUtils$DaoConfig) -> b
    void saveOrUpdateWithoutTransaction(java.lang.Object) -> c
    boolean saveBindingIdWithoutTransaction(java.lang.Object) -> d
    long getLastAutoIncrementId(java.lang.String) -> c
    void createTableIfNotExist(java.lang.Class) -> a
    boolean tableIsExist(java.lang.Class) -> b
    void dropDb() -> b
    void debugSql(java.lang.String) -> d
    void beginTransaction() -> c
    void setTransactionSuccessful() -> d
    void endTransaction() -> e
    void execNonQuery(com.lidroid.xutils.db.sqlite.SqlInfo) -> a
    void execNonQuery(java.lang.String) -> a
    android.database.Cursor execQuery(java.lang.String) -> b
com.lidroid.xutils.DbUtils$DaoConfig -> com.lidroid.xutils.b:
    android.content.Context context -> a
    java.lang.String dbName -> b
    int dbVersion -> c
    com.lidroid.xutils.DbUtils$DbUpgradeListener dbUpgradeListener -> d
    java.lang.String dbDir -> e
    android.content.Context getContext() -> a
    java.lang.String getDbName() -> b
    int getDbVersion() -> c
    com.lidroid.xutils.DbUtils$DbUpgradeListener getDbUpgradeListener() -> d
    java.lang.String getDbDir() -> e
com.lidroid.xutils.DbUtils$DbUpgradeListener -> com.lidroid.xutils.c:
    void onUpgrade(com.lidroid.xutils.DbUtils,int,int) -> a
com.lidroid.xutils.DbUtils$FindTempCache -> com.lidroid.xutils.d:
    java.util.concurrent.ConcurrentHashMap cache -> b
    long seq -> c
    com.lidroid.xutils.DbUtils this$0 -> a
    void put(java.lang.String,java.lang.Object) -> a
    java.lang.Object get(java.lang.String) -> a
    void setSeq(long) -> a
com.lidroid.xutils.HttpUtils -> com.lidroid.xutils.e:
    com.lidroid.xutils.http.HttpCache sHttpCache -> a
    org.apache.http.impl.client.DefaultHttpClient httpClient -> b
    org.apache.http.protocol.HttpContext httpContext -> c
    com.lidroid.xutils.http.callback.HttpRedirectHandler httpRedirectHandler -> d
    java.lang.String responseTextCharset -> e
    long currentRequestExpiry -> f
    com.lidroid.xutils.task.PriorityExecutor EXECUTOR -> g
    com.lidroid.xutils.http.ResponseStream sendSync(com.lidroid.xutils.http.client.HttpRequest$HttpMethod,java.lang.String,com.lidroid.xutils.http.RequestParams) -> a
    com.lidroid.xutils.http.ResponseStream sendSyncRequest(com.lidroid.xutils.http.client.HttpRequest,com.lidroid.xutils.http.RequestParams) -> a
com.lidroid.xutils.HttpUtils$1 -> com.lidroid.xutils.f:
    com.lidroid.xutils.HttpUtils this$0 -> a
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.lidroid.xutils.HttpUtils$2 -> com.lidroid.xutils.g:
    com.lidroid.xutils.HttpUtils this$0 -> a
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
com.lidroid.xutils.ViewUtils -> com.lidroid.xutils.h:
    void inject(android.app.Activity) -> a
    void inject(java.lang.Object,android.view.View) -> a
    void injectObject(java.lang.Object,com.lidroid.xutils.view.ViewFinder) -> a
com.lidroid.xutils.cache.KeyExpiryMap -> com.lidroid.xutils.a.a:
    java.lang.Long get(java.lang.Object) -> a
    java.lang.Long put(java.lang.Object,java.lang.Long) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Long remove(java.lang.Object) -> b
    void clear() -> clear
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
com.lidroid.xutils.cache.LruMemoryCache -> com.lidroid.xutils.a.b:
    java.util.LinkedHashMap map -> a
    int size -> b
    int maxSize -> c
    int putCount -> d
    int createCount -> e
    int evictionCount -> f
    int hitCount -> g
    int missCount -> h
    com.lidroid.xutils.cache.KeyExpiryMap keyExpiryMap -> i
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object,long) -> a
    void trimToSize(int) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object create(java.lang.Object) -> c
    int safeSizeOf(java.lang.Object,java.lang.Object) -> b
    int sizeOf(java.lang.Object,java.lang.Object) -> a
    java.lang.String toString() -> toString
com.lidroid.xutils.db.annotation.Check -> com.lidroid.xutils.db.annotation.Check:
    java.lang.String value() -> value
com.lidroid.xutils.db.annotation.Column -> com.lidroid.xutils.db.annotation.Column:
    java.lang.String column() -> column
    java.lang.String defaultValue() -> defaultValue
com.lidroid.xutils.db.annotation.Finder -> com.lidroid.xutils.db.annotation.Finder:
    java.lang.String valueColumn() -> valueColumn
    java.lang.String targetColumn() -> targetColumn
com.lidroid.xutils.db.annotation.Foreign -> com.lidroid.xutils.db.annotation.Foreign:
    java.lang.String column() -> column
    java.lang.String foreign() -> foreign
com.lidroid.xutils.db.annotation.Id -> com.lidroid.xutils.db.annotation.Id:
    java.lang.String column() -> column
com.lidroid.xutils.db.annotation.NoAutoIncrement -> com.lidroid.xutils.db.annotation.NoAutoIncrement:
com.lidroid.xutils.db.annotation.NotNull -> com.lidroid.xutils.db.annotation.NotNull:
com.lidroid.xutils.db.annotation.Table -> com.lidroid.xutils.db.annotation.Table:
    java.lang.String name() -> name
    java.lang.String execAfterTableCreated() -> execAfterTableCreated
com.lidroid.xutils.db.annotation.Transient -> com.lidroid.xutils.db.annotation.Transient:
com.lidroid.xutils.db.annotation.Unique -> com.lidroid.xutils.db.annotation.Unique:
com.lidroid.xutils.db.converter.BooleanColumnConverter -> com.lidroid.xutils.db.a.a:
    java.lang.Boolean getFieldValue(android.database.Cursor,int) -> a
    java.lang.Boolean getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Boolean) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.converter.ByteArrayColumnConverter -> com.lidroid.xutils.db.a.b:
    byte[] getFieldValue(android.database.Cursor,int) -> a
    byte[] getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(byte[]) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.converter.ByteColumnConverter -> com.lidroid.xutils.db.a.c:
    java.lang.Byte getFieldValue(android.database.Cursor,int) -> a
    java.lang.Byte getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Byte) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.converter.CharColumnConverter -> com.lidroid.xutils.db.a.d:
    java.lang.Character getFieldValue(android.database.Cursor,int) -> a
    java.lang.Character getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Character) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.converter.ColumnConverter -> com.lidroid.xutils.db.a.e:
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
com.lidroid.xutils.db.converter.ColumnConverterFactory -> com.lidroid.xutils.db.a.f:
    java.util.concurrent.ConcurrentHashMap columnType_columnConverter_map -> a
    com.lidroid.xutils.db.converter.ColumnConverter getColumnConverter(java.lang.Class) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getDbColumnType(java.lang.Class) -> b
    boolean isSupportColumnConverter(java.lang.Class) -> c
com.lidroid.xutils.db.converter.DateColumnConverter -> com.lidroid.xutils.db.a.g:
    java.util.Date getFieldValue(android.database.Cursor,int) -> a
    java.util.Date getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(java.util.Date) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.converter.DoubleColumnConverter -> com.lidroid.xutils.db.a.h:
    java.lang.Double getFieldValue(android.database.Cursor,int) -> a
    java.lang.Double getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Double) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.converter.FloatColumnConverter -> com.lidroid.xutils.db.a.i:
    java.lang.Float getFieldValue(android.database.Cursor,int) -> a
    java.lang.Float getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Float) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.converter.IntegerColumnConverter -> com.lidroid.xutils.db.a.j:
    java.lang.Integer getFieldValue(android.database.Cursor,int) -> a
    java.lang.Integer getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Integer) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.converter.LongColumnConverter -> com.lidroid.xutils.db.a.k:
    java.lang.Long getFieldValue(android.database.Cursor,int) -> a
    java.lang.Long getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Long) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.converter.ShortColumnConverter -> com.lidroid.xutils.db.a.l:
    java.lang.Short getFieldValue(android.database.Cursor,int) -> a
    java.lang.Short getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Short) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.converter.SqlDateColumnConverter -> com.lidroid.xutils.db.a.m:
    java.sql.Date getFieldValue(android.database.Cursor,int) -> a
    java.sql.Date getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(java.sql.Date) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.converter.StringColumnConverter -> com.lidroid.xutils.db.a.n:
    java.lang.String getFieldValue(android.database.Cursor,int) -> a
    java.lang.String getFieldValue(java.lang.String) -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.String) -> c
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> a
    java.lang.Object fieldValue2ColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.String) -> b
    java.lang.Object getFieldValue(android.database.Cursor,int) -> b
com.lidroid.xutils.db.sqlite.ColumnDbType -> com.lidroid.xutils.db.b.a:
    com.lidroid.xutils.db.sqlite.ColumnDbType INTEGER -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType REAL -> b
    com.lidroid.xutils.db.sqlite.ColumnDbType TEXT -> c
    com.lidroid.xutils.db.sqlite.ColumnDbType BLOB -> d
    java.lang.String value -> e
    com.lidroid.xutils.db.sqlite.ColumnDbType[] ENUM$VALUES -> f
    java.lang.String toString() -> toString
    com.lidroid.xutils.db.sqlite.ColumnDbType[] values() -> values
    com.lidroid.xutils.db.sqlite.ColumnDbType valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.db.sqlite.CursorUtils -> com.lidroid.xutils.db.b.b:
    java.lang.Object getEntity(com.lidroid.xutils.DbUtils,android.database.Cursor,java.lang.Class,long) -> a
com.lidroid.xutils.db.sqlite.CursorUtils$EntityTempCache -> com.lidroid.xutils.db.b.c:
    java.util.concurrent.ConcurrentHashMap cache -> a
    long seq -> b
    void put(java.lang.Class,java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Class,java.lang.Object) -> a
    void setSeq(long) -> a
com.lidroid.xutils.db.sqlite.CursorUtils$FindCacheSequence -> com.lidroid.xutils.db.b.d:
    long seq -> a
    java.lang.String FOREIGN_LAZY_LOADER_CLASS_NAME -> b
    java.lang.String FINDER_LAZY_LOADER_CLASS_NAME -> c
    long getSeq() -> a
com.lidroid.xutils.db.sqlite.FinderLazyLoader -> com.lidroid.xutils.db.b.e:
    com.lidroid.xutils.db.table.Finder finderColumn -> a
    java.lang.Object finderValue -> b
    java.util.List getAllFromDb() -> a
    java.lang.Object getFirstFromDb() -> b
com.lidroid.xutils.db.sqlite.ForeignLazyLoader -> com.lidroid.xutils.db.b.f:
    com.lidroid.xutils.db.table.Foreign foreignColumn -> a
    java.lang.Object columnValue -> b
    java.util.List getAllFromDb() -> a
    java.lang.Object getFirstFromDb() -> b
    java.lang.Object getColumnValue() -> c
com.lidroid.xutils.db.sqlite.Selector -> com.lidroid.xutils.db.b.g:
    java.lang.Class entityType -> a
    java.lang.String tableName -> b
    com.lidroid.xutils.db.sqlite.WhereBuilder whereBuilder -> c
    java.util.List orderByList -> d
    int limit -> e
    int offset -> f
    com.lidroid.xutils.db.sqlite.Selector from(java.lang.Class) -> a
    com.lidroid.xutils.db.sqlite.Selector where(java.lang.String,java.lang.String,java.lang.Object) -> a
    com.lidroid.xutils.db.sqlite.Selector orderBy(java.lang.String,boolean) -> a
    com.lidroid.xutils.db.sqlite.Selector limit(int) -> a
    java.lang.String toString() -> toString
    java.lang.Class getEntityType() -> a
com.lidroid.xutils.db.sqlite.Selector$OrderBy -> com.lidroid.xutils.db.b.h:
    java.lang.String columnName -> b
    boolean desc -> c
    com.lidroid.xutils.db.sqlite.Selector this$0 -> a
    java.lang.String toString() -> toString
com.lidroid.xutils.db.sqlite.SqlInfo -> com.lidroid.xutils.db.b.i:
    java.lang.String sql -> a
    java.util.LinkedList bindArgs -> b
    java.lang.String getSql() -> a
    void setSql(java.lang.String) -> a
    java.util.LinkedList getBindArgs() -> b
    java.lang.Object[] getBindArgsAsArray() -> c
    void addBindArgWithoutConverter(java.lang.Object) -> a
com.lidroid.xutils.db.sqlite.SqlInfoBuilder -> com.lidroid.xutils.db.b.j:
    com.lidroid.xutils.db.sqlite.SqlInfo buildInsertSqlInfo(com.lidroid.xutils.DbUtils,java.lang.Object) -> a
    com.lidroid.xutils.db.sqlite.SqlInfo buildReplaceSqlInfo(com.lidroid.xutils.DbUtils,java.lang.Object) -> b
    com.lidroid.xutils.db.sqlite.SqlInfo buildUpdateSqlInfo(com.lidroid.xutils.DbUtils,java.lang.Object,java.lang.String[]) -> a
    com.lidroid.xutils.db.sqlite.SqlInfo buildCreateTableSqlInfo(com.lidroid.xutils.DbUtils,java.lang.Class) -> a
    com.lidroid.xutils.db.table.KeyValue column2KeyValue(java.lang.Object,com.lidroid.xutils.db.table.Column) -> a
    java.util.List entity2KeyValueList(com.lidroid.xutils.DbUtils,java.lang.Object) -> c
com.lidroid.xutils.db.sqlite.WhereBuilder -> com.lidroid.xutils.db.b.k:
    java.util.List whereItems -> a
    com.lidroid.xutils.db.sqlite.WhereBuilder b(java.lang.String,java.lang.String,java.lang.Object) -> a
    int getWhereItemSize() -> a
    java.lang.String toString() -> toString
    void appendCondition(java.lang.String,java.lang.String,java.lang.String,java.lang.Object) -> a
com.lidroid.xutils.db.table.Column -> com.lidroid.xutils.db.c.a:
    com.lidroid.xutils.db.table.Table table -> f
    int index -> g
    java.lang.String columnName -> a
    java.lang.Object defaultValue -> h
    java.lang.reflect.Method getMethod -> b
    java.lang.reflect.Method setMethod -> c
    java.lang.reflect.Field columnField -> d
    com.lidroid.xutils.db.converter.ColumnConverter columnConverter -> e
    void setValue2Entity(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object getColumnValue(java.lang.Object) -> a
    java.lang.Object getFieldValue(java.lang.Object) -> b
    com.lidroid.xutils.db.table.Table getTable() -> a
    void setTable(com.lidroid.xutils.db.table.Table) -> a
    int getIndex() -> b
    java.lang.String getColumnName() -> c
    java.lang.Object getDefaultValue() -> d
    java.lang.reflect.Field getColumnField() -> e
    com.lidroid.xutils.db.converter.ColumnConverter getColumnConverter() -> f
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> g
com.lidroid.xutils.db.table.ColumnUtils -> com.lidroid.xutils.db.c.b:
    java.util.HashSet DB_PRIMITIVE_TYPES -> a
    boolean isDbPrimitiveType(java.lang.Class) -> a
    java.lang.reflect.Method getColumnGetMethod(java.lang.Class,java.lang.reflect.Field) -> a
    java.lang.reflect.Method getColumnSetMethod(java.lang.Class,java.lang.reflect.Field) -> b
    java.lang.String getColumnNameByField(java.lang.reflect.Field) -> a
    java.lang.String getForeignColumnNameByField(java.lang.reflect.Field) -> b
    java.lang.String getColumnDefaultValue(java.lang.reflect.Field) -> c
    boolean isTransient(java.lang.reflect.Field) -> d
    boolean isForeign(java.lang.reflect.Field) -> e
    boolean isFinder(java.lang.reflect.Field) -> f
    boolean isUnique(java.lang.reflect.Field) -> g
    boolean isNotNull(java.lang.reflect.Field) -> h
    java.lang.String getCheck(java.lang.reflect.Field) -> i
    java.lang.Class getForeignEntityType(com.lidroid.xutils.db.table.Foreign) -> a
    java.lang.Class getFinderTargetEntityType(com.lidroid.xutils.db.table.Finder) -> a
    java.lang.Object convert2DbColumnValueIfNeeded(java.lang.Object) -> a
    boolean isStartWithIs(java.lang.String) -> a
    java.lang.reflect.Method getBooleanColumnGetMethod(java.lang.Class,java.lang.String) -> a
    java.lang.reflect.Method getBooleanColumnSetMethod(java.lang.Class,java.lang.reflect.Field) -> c
com.lidroid.xutils.db.table.Finder -> com.lidroid.xutils.db.c.c:
    java.lang.String valueColumnName -> f
    java.lang.String targetColumnName -> g
    java.lang.Class getTargetEntityType() -> h
    java.lang.String getTargetColumnName() -> i
    void setValue2Entity(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object getColumnValue(java.lang.Object) -> a
    java.lang.Object getDefaultValue() -> d
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> g
com.lidroid.xutils.db.table.Foreign -> com.lidroid.xutils.db.c.d:
    java.lang.String foreignColumnName -> f
    com.lidroid.xutils.db.converter.ColumnConverter foreignColumnConverter -> g
    java.lang.String getForeignColumnName() -> h
    java.lang.Class getForeignEntityType() -> i
    void setValue2Entity(java.lang.Object,android.database.Cursor,int) -> a
    java.lang.Object getColumnValue(java.lang.Object) -> a
    com.lidroid.xutils.db.sqlite.ColumnDbType getColumnDbType() -> g
    java.lang.Object getDefaultValue() -> d
com.lidroid.xutils.db.table.Id -> com.lidroid.xutils.db.c.e:
    java.lang.String columnFieldClassName -> f
    boolean isAutoIncrementChecked -> g
    boolean isAutoIncrement -> h
    java.util.HashSet INTEGER_TYPES -> i
    java.util.HashSet AUTO_INCREMENT_TYPES -> j
    boolean isAutoIncrement() -> h
    void setAutoIncrementId(java.lang.Object,long) -> a
    java.lang.Object getColumnValue(java.lang.Object) -> a
com.lidroid.xutils.db.table.KeyValue -> com.lidroid.xutils.db.c.f:
    java.lang.String key -> a
    java.lang.Object value -> b
com.lidroid.xutils.db.table.Table -> com.lidroid.xutils.db.c.g:
    com.lidroid.xutils.DbUtils db -> a
    java.lang.String tableName -> b
    com.lidroid.xutils.db.table.Id id -> c
    java.util.HashMap columnMap -> d
    java.util.HashMap finderMap -> e
    java.util.HashMap tableMap -> f
    boolean checkedDatabase -> g
    com.lidroid.xutils.db.table.Table get(com.lidroid.xutils.DbUtils,java.lang.Class) -> a
    void remove(com.lidroid.xutils.DbUtils,java.lang.String) -> a
    boolean isCheckedDatabase() -> a
    void setCheckedDatabase(boolean) -> a
com.lidroid.xutils.db.table.TableUtils -> com.lidroid.xutils.db.c.h:
    java.util.concurrent.ConcurrentHashMap entityColumnsMap -> a
    java.util.concurrent.ConcurrentHashMap entityIdMap -> b
    java.lang.String getTableName(java.lang.Class) -> a
    java.lang.String getExecAfterTableCreated(java.lang.Class) -> b
    java.util.HashMap getColumnMap(java.lang.Class) -> c
    void addColumns2Map(java.lang.Class,java.lang.String,java.util.HashMap) -> a
    com.lidroid.xutils.db.table.Column getColumnOrId(java.lang.Class,java.lang.String) -> a
    com.lidroid.xutils.db.table.Id getId(java.lang.Class) -> d
    java.lang.String getPrimaryKeyFieldName(java.lang.Class) -> e
    java.lang.String getPrimaryKeyColumnName(java.lang.Class) -> f
com.lidroid.xutils.exception.BaseException -> com.lidroid.xutils.b.a:
com.lidroid.xutils.exception.DbException -> com.lidroid.xutils.b.b:
com.lidroid.xutils.exception.HttpException -> com.lidroid.xutils.b.c:
    int exceptionCode -> a
com.lidroid.xutils.http.HttpCache -> com.lidroid.xutils.c.a:
    com.lidroid.xutils.cache.LruMemoryCache mMemoryCache -> a
    int cacheSize -> b
    long defaultExpiryTime -> c
    java.util.concurrent.ConcurrentHashMap httpMethod_enabled_map -> d
    long getDefaultExpiryTime() -> a
    void put(java.lang.String,java.lang.String,long) -> a
    java.lang.String get(java.lang.String) -> a
    boolean isEnabled(java.lang.String) -> b
com.lidroid.xutils.http.HttpCache$1 -> com.lidroid.xutils.c.b:
    com.lidroid.xutils.http.HttpCache this$0 -> a
    int sizeOf(java.lang.String,java.lang.String) -> a
    int sizeOf(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.http.RequestParams -> com.lidroid.xutils.c.c:
    java.lang.String charset -> a
    java.util.List headers -> b
    java.util.List queryStringParams -> c
    org.apache.http.HttpEntity bodyEntity -> d
    java.util.List bodyParams -> e
    java.util.HashMap fileParams -> f
    java.lang.String getCharset() -> a
    void addBodyParameter(java.lang.String,java.lang.String) -> a
    org.apache.http.HttpEntity getEntity() -> b
    java.util.List getQueryStringParams() -> c
    java.util.List getHeaders() -> d
com.lidroid.xutils.http.RequestParams$HeaderItem -> com.lidroid.xutils.c.d:
    boolean overwrite -> a
    org.apache.http.Header header -> b
com.lidroid.xutils.http.ResponseStream -> com.lidroid.xutils.c.e:
    org.apache.http.HttpResponse baseResponse -> a
    java.io.InputStream baseStream -> b
    java.lang.String charset -> c
    java.lang.String requestUrl -> d
    java.lang.String requestMethod -> e
    long expiry -> f
    java.lang.String _directResult -> g
    void setRequestMethod(java.lang.String) -> a
    java.lang.String readString() -> a
    int read() -> read
    int available() -> available
    void close() -> close
    void mark(int) -> mark
    boolean markSupported() -> markSupported
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void reset() -> reset
    long skip(long) -> skip
com.lidroid.xutils.http.SyncHttpHandler -> com.lidroid.xutils.c.f:
    org.apache.http.impl.client.AbstractHttpClient client -> a
    org.apache.http.protocol.HttpContext context -> b
    com.lidroid.xutils.http.callback.HttpRedirectHandler httpRedirectHandler -> c
    java.lang.String requestUrl -> d
    java.lang.String requestMethod -> e
    java.lang.String charset -> f
    int retriedTimes -> g
    long expiry -> h
    void setHttpRedirectHandler(com.lidroid.xutils.http.callback.HttpRedirectHandler) -> a
    void setExpiry(long) -> a
    com.lidroid.xutils.http.ResponseStream sendRequest(org.apache.http.client.methods.HttpRequestBase) -> a
    com.lidroid.xutils.http.ResponseStream handleResponse(org.apache.http.HttpResponse) -> a
com.lidroid.xutils.http.callback.DefaultHttpRedirectHandler -> com.lidroid.xutils.c.a.a:
    org.apache.http.client.methods.HttpRequestBase getDirectRequest(org.apache.http.HttpResponse) -> a
com.lidroid.xutils.http.callback.HttpRedirectHandler -> com.lidroid.xutils.c.a.b:
    org.apache.http.client.methods.HttpRequestBase getDirectRequest(org.apache.http.HttpResponse) -> a
com.lidroid.xutils.http.callback.RequestCallBackHandler -> com.lidroid.xutils.c.a.c:
    boolean updateProgress(long,long,boolean) -> a
com.lidroid.xutils.http.client.DefaultSSLSocketFactory -> com.lidroid.xutils.c.b.a:
    javax.net.ssl.SSLContext sslContext -> a
    java.security.KeyStore trustStore -> b
    com.lidroid.xutils.http.client.DefaultSSLSocketFactory instance -> c
    com.lidroid.xutils.http.client.DefaultSSLSocketFactory getSocketFactory() -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
com.lidroid.xutils.http.client.DefaultSSLSocketFactory$1 -> com.lidroid.xutils.c.b.b:
    com.lidroid.xutils.http.client.DefaultSSLSocketFactory this$0 -> a
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
com.lidroid.xutils.http.client.HttpRequest -> com.lidroid.xutils.c.b.c:
    org.apache.http.HttpEntity entity -> a
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod method -> b
    com.lidroid.xutils.http.client.util.URIBuilder uriBuilder -> c
    java.nio.charset.Charset uriCharset -> d
    com.lidroid.xutils.http.client.HttpRequest addQueryStringParams(java.util.List) -> a
    void setRequestParams(com.lidroid.xutils.http.RequestParams) -> a
    java.net.URI getURI() -> getURI
    void setURI(java.net.URI) -> setURI
    void setURI(java.lang.String) -> a
    java.lang.String getMethod() -> getMethod
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    java.lang.Object clone() -> clone
com.lidroid.xutils.http.client.HttpRequest$HttpMethod -> com.lidroid.xutils.c.b.d:
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod GET -> a
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod POST -> b
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod PUT -> c
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod HEAD -> d
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod MOVE -> e
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod COPY -> f
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod DELETE -> g
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod OPTIONS -> h
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod TRACE -> i
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod CONNECT -> j
    java.lang.String value -> k
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod[] ENUM$VALUES -> l
    java.lang.String toString() -> toString
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod[] values() -> values
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.http.client.RetryHandler -> com.lidroid.xutils.c.b.e:
    java.util.HashSet exceptionWhiteList -> a
    java.util.HashSet exceptionBlackList -> b
    int maxRetries -> c
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
com.lidroid.xutils.http.client.entity.BodyParamsEntity -> com.lidroid.xutils.c.b.a.a:
    byte[] content -> a
    boolean dirty -> b
    java.lang.String charset -> c
    java.util.List params -> d
    void refreshContent() -> a
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
com.lidroid.xutils.http.client.entity.DecompressingEntity -> com.lidroid.xutils.c.b.a.b:
    java.io.InputStream content -> a
    long uncompressedLength -> b
    long uploadedSize -> c
    com.lidroid.xutils.http.callback.RequestCallBackHandler callBackHandler -> d
    java.io.InputStream decorate(java.io.InputStream) -> a
    java.io.InputStream getDecompressingStream() -> a
    java.io.InputStream getContent() -> getContent
    long getContentLength() -> getContentLength
    void writeTo(java.io.OutputStream) -> writeTo
com.lidroid.xutils.http.client.entity.GZipDecompressingEntity -> com.lidroid.xutils.c.b.a.c:
    java.io.InputStream decorate(java.io.InputStream) -> a
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
com.lidroid.xutils.http.client.multipart.FormBodyPart -> com.lidroid.xutils.c.b.b.a:
    java.lang.String name -> a
    com.lidroid.xutils.http.client.multipart.MinimalFieldHeader header -> b
    com.lidroid.xutils.http.client.multipart.content.ContentBody body -> c
    java.lang.String getName() -> a
    com.lidroid.xutils.http.client.multipart.content.ContentBody getBody() -> b
    com.lidroid.xutils.http.client.multipart.MinimalFieldHeader getHeader() -> c
    void addField(java.lang.String,java.lang.String) -> a
    void generateContentDisposition(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> a
    void generateContentType(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> b
    void generateTransferEncoding(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> c
com.lidroid.xutils.http.client.multipart.HttpMultipart -> com.lidroid.xutils.c.b.b.b:
    org.apache.http.util.ByteArrayBuffer FIELD_SEP -> a
    org.apache.http.util.ByteArrayBuffer CR_LF -> b
    org.apache.http.util.ByteArrayBuffer TWO_DASHES -> c
    java.lang.String subType -> d
    java.nio.charset.Charset charset -> e
    java.lang.String boundary -> f
    java.util.List parts -> g
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode mode -> h
    int[] $SWITCH_TABLE$com$lidroid$xutils$http$client$multipart$HttpMultipartMode -> i
    org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String) -> a
    void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.io.OutputStream) -> a
    void writeField(com.lidroid.xutils.http.client.multipart.MinimalField,java.io.OutputStream) -> a
    void writeField(com.lidroid.xutils.http.client.multipart.MinimalField,java.nio.charset.Charset,java.io.OutputStream) -> a
    java.util.List getBodyParts() -> a
    void addBodyPart(com.lidroid.xutils.http.client.multipart.FormBodyPart) -> a
    java.lang.String getBoundary() -> b
    void doWriteTo(com.lidroid.xutils.http.client.multipart.HttpMultipartMode,java.io.OutputStream,boolean) -> a
    void doWriteTo(com.lidroid.xutils.http.client.multipart.HttpMultipartMode,java.io.OutputStream,com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo,boolean) -> a
    void writeTo(java.io.OutputStream,com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
    long getTotalLength() -> c
    int[] $SWITCH_TABLE$com$lidroid$xutils$http$client$multipart$HttpMultipartMode() -> d
com.lidroid.xutils.http.client.multipart.HttpMultipartMode -> com.lidroid.xutils.c.b.b.c:
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode STRICT -> a
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode BROWSER_COMPATIBLE -> b
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode[] ENUM$VALUES -> c
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode[] values() -> values
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.http.client.multipart.MIME -> com.lidroid.xutils.c.b.b.d:
    java.nio.charset.Charset DEFAULT_CHARSET -> a
com.lidroid.xutils.http.client.multipart.MinimalField -> com.lidroid.xutils.c.b.b.e:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getName() -> a
    java.lang.String getBody() -> b
    java.lang.String toString() -> toString
com.lidroid.xutils.http.client.multipart.MinimalFieldHeader -> com.lidroid.xutils.c.b.b.f:
    java.util.List fields -> a
    java.util.Map fieldMap -> b
    void addField(com.lidroid.xutils.http.client.multipart.MinimalField) -> a
    com.lidroid.xutils.http.client.multipart.MinimalField getField(java.lang.String) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.lidroid.xutils.http.client.multipart.MultipartEntity -> com.lidroid.xutils.c.b.b.g:
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo callBackInfo -> a
    char[] MULTIPART_CHARS -> b
    com.lidroid.xutils.http.client.multipart.HttpMultipart multipart -> c
    org.apache.http.Header contentType -> d
    long length -> e
    boolean dirty -> f
    java.lang.String boundary -> g
    java.nio.charset.Charset charset -> h
    java.lang.String multipartSubtype -> i
    java.lang.String generateContentType(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String generateBoundary() -> a
    void addPart(com.lidroid.xutils.http.client.multipart.FormBodyPart) -> a
    void addPart(java.lang.String,com.lidroid.xutils.http.client.multipart.content.ContentBody) -> a
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    boolean isStreaming() -> isStreaming
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo -> com.lidroid.xutils.c.b.b.h:
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo DEFAULT -> a
    com.lidroid.xutils.http.callback.RequestCallBackHandler callBackHandler -> b
    long totalLength -> c
    long pos -> d
    boolean doCallBack(boolean) -> a
com.lidroid.xutils.http.client.multipart.content.AbstractContentBody -> com.lidroid.xutils.c.b.b.a.a:
    java.lang.String mimeType -> b
    java.lang.String mediaType -> c
    java.lang.String subType -> d
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo callBackInfo -> a
    java.lang.String getMimeType() -> a
    void setCallBackInfo(com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
com.lidroid.xutils.http.client.multipart.content.ContentBody -> com.lidroid.xutils.c.b.b.a.b:
    java.lang.String getFilename() -> b
    void writeTo(java.io.OutputStream) -> a
    void setCallBackInfo(com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
com.lidroid.xutils.http.client.multipart.content.ContentDescriptor -> com.lidroid.xutils.c.b.b.a.c:
    java.lang.String getMimeType() -> a
    java.lang.String getCharset() -> c
    java.lang.String getTransferEncoding() -> d
    long getContentLength() -> e
com.lidroid.xutils.http.client.multipart.content.StringBody -> com.lidroid.xutils.c.b.b.a.d:
    byte[] content -> b
    java.nio.charset.Charset charset -> c
    void writeTo(java.io.OutputStream) -> a
    java.lang.String getTransferEncoding() -> d
    java.lang.String getCharset() -> c
    long getContentLength() -> e
    java.lang.String getFilename() -> b
com.lidroid.xutils.http.client.util.URIBuilder -> com.lidroid.xutils.c.b.c.a:
    java.lang.String scheme -> a
    java.lang.String encodedSchemeSpecificPart -> b
    java.lang.String encodedAuthority -> c
    java.lang.String userInfo -> d
    java.lang.String encodedUserInfo -> e
    java.lang.String host -> f
    int port -> g
    java.lang.String path -> h
    java.lang.String encodedPath -> i
    java.lang.String encodedQuery -> j
    java.util.List queryParams -> k
    java.lang.String fragment -> l
    java.lang.String encodedFragment -> m
    void digestURI(java.net.URI) -> a
    java.util.List parseQuery(java.lang.String) -> a
    java.net.URI build(java.nio.charset.Charset) -> a
    java.lang.String buildString(java.nio.charset.Charset) -> b
    java.lang.String encodeUserInfo(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String encodePath(java.lang.String,java.nio.charset.Charset) -> b
    java.lang.String encodeQuery(java.util.List,java.nio.charset.Charset) -> a
    java.lang.String encodeFragment(java.lang.String,java.nio.charset.Charset) -> c
    com.lidroid.xutils.http.client.util.URIBuilder addParameter(java.lang.String,java.lang.String) -> a
    java.lang.String normalizePath(java.lang.String) -> b
com.lidroid.xutils.http.client.util.URLEncodedUtils -> com.lidroid.xutils.c.b.c.b:
    char[] DELIM -> a
    java.util.BitSet UNRESERVED -> b
    java.util.BitSet PUNCT -> c
    java.util.BitSet USERINFO -> d
    java.util.BitSet PATHSAFE -> e
    java.util.BitSet FRAGMENT -> f
    java.util.BitSet RESERVED -> g
    java.util.BitSet URLENCODER -> h
    java.util.List parse(java.lang.String) -> a
    java.lang.String format(java.util.List,java.lang.String) -> a
    java.lang.String format(java.lang.Iterable,java.nio.charset.Charset) -> a
    java.lang.String urlencode(java.lang.String,java.nio.charset.Charset,java.util.BitSet,boolean) -> a
    java.lang.String encodeFormFields(java.lang.String,java.lang.String) -> a
    java.lang.String encodeFormFields(java.lang.String,java.nio.charset.Charset) -> d
    java.lang.String encUserInfo(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String encFragment(java.lang.String,java.nio.charset.Charset) -> b
    java.lang.String encPath(java.lang.String,java.nio.charset.Charset) -> c
com.lidroid.xutils.task.Node -> com.lidroid.xutils.d.a:
    boolean valueAsT -> b
    com.lidroid.xutils.task.PriorityObject value -> c
    com.lidroid.xutils.task.Node next -> a
    com.lidroid.xutils.task.Priority getPriority() -> a
    java.lang.Object getValue() -> b
    void setValue(java.lang.Object) -> a
com.lidroid.xutils.task.Priority -> com.lidroid.xutils.d.b:
    com.lidroid.xutils.task.Priority UI_TOP -> a
    com.lidroid.xutils.task.Priority UI_NORMAL -> b
    com.lidroid.xutils.task.Priority UI_LOW -> c
    com.lidroid.xutils.task.Priority DEFAULT -> d
    com.lidroid.xutils.task.Priority BG_TOP -> e
    com.lidroid.xutils.task.Priority BG_NORMAL -> f
    com.lidroid.xutils.task.Priority BG_LOW -> g
    com.lidroid.xutils.task.Priority[] ENUM$VALUES -> h
    com.lidroid.xutils.task.Priority[] values() -> values
    com.lidroid.xutils.task.Priority valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.task.PriorityExecutor -> com.lidroid.xutils.d.c:
    java.util.concurrent.ThreadFactory sThreadFactory -> a
    java.util.concurrent.BlockingQueue mPoolWorkQueue -> b
    java.util.concurrent.ThreadPoolExecutor mThreadPoolExecutor -> c
    void execute(java.lang.Runnable) -> execute
com.lidroid.xutils.task.PriorityExecutor$1 -> com.lidroid.xutils.d.d:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.lidroid.xutils.task.PriorityObject -> com.lidroid.xutils.d.e:
    com.lidroid.xutils.task.Priority priority -> a
    java.lang.Object obj -> b
com.lidroid.xutils.task.PriorityObjectBlockingQueue -> com.lidroid.xutils.d.f:
    int capacity -> b
    java.util.concurrent.atomic.AtomicInteger count -> c
    com.lidroid.xutils.task.Node head -> a
    com.lidroid.xutils.task.Node last -> d
    java.util.concurrent.locks.ReentrantLock takeLock -> e
    java.util.concurrent.locks.Condition notEmpty -> f
    java.util.concurrent.locks.ReentrantLock putLock -> g
    java.util.concurrent.locks.Condition notFull -> h
    void signalNotEmpty() -> c
    void signalNotFull() -> d
    java.lang.Object opQueue(com.lidroid.xutils.task.Node) -> a
    void _enqueue(com.lidroid.xutils.task.Node) -> b
    java.lang.Object _dequeue() -> e
    void fullyLock() -> a
    void fullyUnlock() -> b
    int size() -> size
    int remainingCapacity() -> remainingCapacity
    void put(java.lang.Object) -> put
    boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    boolean offer(java.lang.Object) -> offer
    java.lang.Object take() -> take
    java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    void unlink(com.lidroid.xutils.task.Node,com.lidroid.xutils.task.Node) -> a
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    void clear() -> clear
    int drainTo(java.util.Collection) -> drainTo
    int drainTo(java.util.Collection,int) -> drainTo
    java.util.Iterator iterator() -> iterator
com.lidroid.xutils.task.PriorityObjectBlockingQueue$Itr -> com.lidroid.xutils.d.g:
    com.lidroid.xutils.task.Node current -> b
    com.lidroid.xutils.task.Node lastRet -> c
    java.lang.Object currentElement -> d
    com.lidroid.xutils.task.PriorityObjectBlockingQueue this$0 -> a
    boolean hasNext() -> hasNext
    com.lidroid.xutils.task.Node nextNode(com.lidroid.xutils.task.Node) -> a
    java.lang.Object next() -> next
    void remove() -> remove
com.lidroid.xutils.util.DoubleKeyValueMap -> com.lidroid.xutils.e.a:
    java.util.concurrent.ConcurrentHashMap k1_k2V_map -> a
    void put(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.util.IOUtils -> com.lidroid.xutils.e.b:
    void closeQuietly(java.io.Closeable) -> a
    void closeQuietly(android.database.Cursor) -> a
com.lidroid.xutils.util.LogUtils -> com.lidroid.xutils.e.c:
    java.lang.String customTagPrefix -> a
    boolean allowD -> b
    boolean allowE -> c
    boolean allowI -> d
    boolean allowV -> e
    boolean allowW -> f
    boolean allowWtf -> g
    com.lidroid.xutils.util.LogUtils$CustomLogger customLogger -> h
    java.lang.String generateTag(java.lang.StackTraceElement) -> a
    void d(java.lang.String) -> a
    void e(java.lang.String) -> b
    void e(java.lang.String,java.lang.Throwable) -> a
com.lidroid.xutils.util.LogUtils$CustomLogger -> com.lidroid.xutils.e.d:
    void d(java.lang.String,java.lang.String) -> a
    void e(java.lang.String,java.lang.String) -> b
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> a
com.lidroid.xutils.util.OtherUtils -> com.lidroid.xutils.e.e:
    java.lang.String getUserAgent(android.content.Context) -> a
    java.nio.charset.Charset getCharsetFromHttpRequest(org.apache.http.client.methods.HttpRequestBase) -> a
    java.lang.StackTraceElement getCallerStackTraceElement() -> a
com.lidroid.xutils.view.EventListenerManager -> com.lidroid.xutils.view.a:
    com.lidroid.xutils.util.DoubleKeyValueMap listenerCache -> a
    void addEventMethod(com.lidroid.xutils.view.ViewFinder,com.lidroid.xutils.view.ViewInjectInfo,java.lang.annotation.Annotation,java.lang.Object,java.lang.reflect.Method) -> a
com.lidroid.xutils.view.EventListenerManager$DynamicHandler -> com.lidroid.xutils.view.b:
    java.lang.ref.WeakReference handlerRef -> a
    java.util.HashMap methodMap -> b
    void addMethod(java.lang.String,java.lang.reflect.Method) -> a
    java.lang.Object getHandler() -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
com.lidroid.xutils.view.ResLoader -> com.lidroid.xutils.view.c:
    int[] $SWITCH_TABLE$com$lidroid$xutils$view$ResType -> a
    java.lang.Object loadRes(com.lidroid.xutils.view.ResType,android.content.Context,int) -> a
    int[] $SWITCH_TABLE$com$lidroid$xutils$view$ResType() -> a
com.lidroid.xutils.view.ResType -> com.lidroid.xutils.view.d:
    com.lidroid.xutils.view.ResType Animation -> a
    com.lidroid.xutils.view.ResType Boolean -> b
    com.lidroid.xutils.view.ResType Color -> c
    com.lidroid.xutils.view.ResType ColorStateList -> d
    com.lidroid.xutils.view.ResType Dimension -> e
    com.lidroid.xutils.view.ResType DimensionPixelOffset -> f
    com.lidroid.xutils.view.ResType DimensionPixelSize -> g
    com.lidroid.xutils.view.ResType Drawable -> h
    com.lidroid.xutils.view.ResType Integer -> i
    com.lidroid.xutils.view.ResType IntArray -> j
    com.lidroid.xutils.view.ResType Movie -> k
    com.lidroid.xutils.view.ResType String -> l
    com.lidroid.xutils.view.ResType StringArray -> m
    com.lidroid.xutils.view.ResType Text -> n
    com.lidroid.xutils.view.ResType TextArray -> o
    com.lidroid.xutils.view.ResType Xml -> p
    com.lidroid.xutils.view.ResType[] ENUM$VALUES -> q
    com.lidroid.xutils.view.ResType[] values() -> values
    com.lidroid.xutils.view.ResType valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.view.ViewFinder -> com.lidroid.xutils.view.e:
    android.view.View view -> a
    android.app.Activity activity -> b
    android.preference.PreferenceGroup preferenceGroup -> c
    android.preference.PreferenceActivity preferenceActivity -> d
    android.view.View findViewById(int) -> a
    android.view.View findViewByInfo(com.lidroid.xutils.view.ViewInjectInfo) -> a
    android.view.View findViewById(int,int) -> a
    android.preference.Preference findPreference(java.lang.CharSequence) -> a
    android.content.Context getContext() -> a
com.lidroid.xutils.view.ViewInjectInfo -> com.lidroid.xutils.view.f:
    java.lang.Object value -> a
    int parentId -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.lidroid.xutils.view.annotation.ContentView -> com.lidroid.xutils.view.annotation.ContentView:
    int value() -> value
com.lidroid.xutils.view.annotation.PreferenceInject -> com.lidroid.xutils.view.annotation.PreferenceInject:
    java.lang.String value() -> value
com.lidroid.xutils.view.annotation.ResInject -> com.lidroid.xutils.view.annotation.ResInject:
    int id() -> id
    com.lidroid.xutils.view.ResType type() -> type
com.lidroid.xutils.view.annotation.ViewInject -> com.lidroid.xutils.view.annotation.ViewInject:
    int value() -> value
    int parentId() -> parentId
com.lidroid.xutils.view.annotation.event.EventBase -> com.lidroid.xutils.view.annotation.event.EventBase:
    java.lang.Class listenerType() -> listenerType
    java.lang.String listenerSetter() -> listenerSetter
    java.lang.String methodName() -> methodName
com.lidroid.xutils.view.annotation.event.OnChildClick -> com.lidroid.xutils.view.annotation.event.OnChildClick:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnClick -> com.lidroid.xutils.view.annotation.event.OnClick:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnCompoundButtonCheckedChange -> com.lidroid.xutils.view.annotation.event.OnCompoundButtonCheckedChange:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnFocusChange -> com.lidroid.xutils.view.annotation.event.OnFocusChange:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnGroupClick -> com.lidroid.xutils.view.annotation.event.OnGroupClick:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnGroupCollapse -> com.lidroid.xutils.view.annotation.event.OnGroupCollapse:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnGroupExpand -> com.lidroid.xutils.view.annotation.event.OnGroupExpand:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnItemClick -> com.lidroid.xutils.view.annotation.event.OnItemClick:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnItemLongClick -> com.lidroid.xutils.view.annotation.event.OnItemLongClick:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnItemSelected -> com.lidroid.xutils.view.annotation.event.OnItemSelected:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnKey -> com.lidroid.xutils.view.annotation.event.OnKey:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnLongClick -> com.lidroid.xutils.view.annotation.event.OnLongClick:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnNothingSelected -> com.lidroid.xutils.view.annotation.event.OnNothingSelected:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnPreferenceChange -> com.lidroid.xutils.view.annotation.event.OnPreferenceChange:
    java.lang.String[] value() -> value
com.lidroid.xutils.view.annotation.event.OnPreferenceClick -> com.lidroid.xutils.view.annotation.event.OnPreferenceClick:
    java.lang.String[] value() -> value
com.lidroid.xutils.view.annotation.event.OnProgressChanged -> com.lidroid.xutils.view.annotation.event.OnProgressChanged:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnRadioGroupCheckedChange -> com.lidroid.xutils.view.annotation.event.OnRadioGroupCheckedChange:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnScroll -> com.lidroid.xutils.view.annotation.event.OnScroll:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnScrollStateChanged -> com.lidroid.xutils.view.annotation.event.OnScrollStateChanged:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnStartTrackingTouch -> com.lidroid.xutils.view.annotation.event.OnStartTrackingTouch:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnStopTrackingTouch -> com.lidroid.xutils.view.annotation.event.OnStopTrackingTouch:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnTabChange -> com.lidroid.xutils.view.annotation.event.OnTabChange:
    int[] value() -> value
    int[] parentId() -> parentId
com.lidroid.xutils.view.annotation.event.OnTouch -> com.lidroid.xutils.view.annotation.event.OnTouch:
    int[] value() -> value
    int[] parentId() -> parentId
com.parking.AbstractFragment -> com.parking.a:
    android.view.View rootView -> Q
    boolean inflaterView -> P
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    android.view.View createView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> c
com.parking.AccountFragment -> com.parking.b:
    android.widget.TextView userName -> Q
    android.widget.TextView authroizedName -> R
    android.widget.TextView idCard -> S
    android.widget.TextView alipay -> T
    android.widget.TextView weiXing -> U
    android.widget.TextView bankCard -> V
    android.widget.TextView todayIncome -> W
    android.widget.TextView lastMonthIncome -> X
    com.parking.User queryUser -> Y
    com.parking.task.IAccountTask task -> Z
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    android.view.View createView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> c
    void onPause() -> g
    void procQueryUserInfo(android.os.Message) -> procQueryUserInfo
    void quiteLogin(android.view.View) -> quiteLogin
    void procQuiteLogin(android.os.Message) -> procQuiteLogin
    void initValue() -> w
    void editUserName(android.view.View) -> editUserName
    void editUserCountName(android.view.View) -> editUserCountName
    java.lang.String mask(java.lang.String,int,int) -> a
    java.lang.String access$0(com.parking.AccountFragment,java.lang.String,int,int) -> a
com.parking.AccountFragment$1 -> com.parking.c:
    com.parking.AccountFragment this$0 -> a
    void postExecute() -> a
com.parking.AccountFragment$2 -> com.parking.d:
    com.parking.AccountFragment this$0 -> a
    void postExecute() -> a
com.parking.CapturePicActivity -> com.parking.CapturePicActivity:
    com.parking.PreView preView -> a
    com.parking.task.ICapturePicTask task -> b
    void onCreate(android.os.Bundle) -> onCreate
    void captureImage(android.view.View) -> captureImage
    void onPictureTaken(byte[],android.hardware.Camera) -> onPictureTaken
    void procRawPic(android.os.Message) -> procRawPic
com.parking.CreateOrderActivity -> com.parking.CreateOrderActivity:
    android.graphics.Bitmap bitMap -> a
    com.parking.User userInfo -> b
    android.widget.Spinner feeType -> c
    android.widget.TextView timeStamp -> d
    android.widget.TextView carNo -> e
    android.widget.ImageView carPic -> f
    android.widget.TextView playMoney -> g
    android.widget.EditText carNumber -> h
    android.widget.Button createNewOrderButton -> i
    com.parking.LocationMg locationMg -> j
    com.parking.task.ICreateOrderTask task -> k
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void procOrderMax(android.os.Message) -> procOrderMax
    void procReconizeNo(android.os.Message) -> procReconizeNo
    void onClickBack(android.view.View) -> onClickBack
    void onClickConfirm(android.view.View) -> onClickConfirm
    void procNewOrder(android.os.Message) -> procNewOrder
com.parking.InputMoneyDialog -> com.parking.e:
    com.parking.UserOrder uo -> a
    android.widget.EditText playMoney -> b
    com.parking.InputMoneyDialog$CallBack callback -> c
    com.parking.task.IInputDialogTask task -> d
    com.parking.InputMoneyDialog init(com.parking.InputMoneyDialog$CallBack) -> a
    void procGetTimeAndFee(android.os.Message) -> procGetTimeAndFee
    void onClick(android.view.View) -> onClick
    void procConfirNewOrder(android.os.Message) -> procConfirNewOrder
com.parking.InputMoneyDialog$CallBack -> com.parking.f:
    void postExecute() -> a
com.parking.InputUserCountDialog -> com.parking.g:
    com.parking.User user -> a
    com.parking.InputUserCountDialog$CallBack callback -> b
    com.parking.task.IInputDialogTask task -> c
    com.parking.InputUserCountDialog init(com.parking.InputUserCountDialog$CallBack) -> a
    void onClick(android.view.View) -> onClick
    void procConfirNewOrder(android.os.Message) -> procConfirNewOrder
com.parking.InputUserCountDialog$CallBack -> com.parking.h:
    void postExecute() -> a
com.parking.InputUserNameDialog -> com.parking.i:
    com.parking.User user -> a
    com.parking.InputUserNameDialog$CallBack callback -> b
    com.parking.task.IInputDialogTask task -> c
    com.parking.InputUserNameDialog init(com.parking.InputUserNameDialog$CallBack) -> a
    void onClick(android.view.View) -> onClick
    void procConfirNewOrder(android.os.Message) -> procConfirNewOrder
com.parking.InputUserNameDialog$CallBack -> com.parking.j:
    void postExecute() -> a
com.parking.LocationMg -> com.parking.k:
    android.location.Location location -> a
    android.location.LocationManager locMgr -> b
    android.location.LocationListener locationListener -> c
    void destory() -> a
    android.location.Location getLocation() -> b
    void access$0(com.parking.LocationMg,android.location.Location) -> a
com.parking.LocationMg$1 -> com.parking.l:
    com.parking.LocationMg this$0 -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
com.parking.LoginActivity -> com.parking.LoginActivity:
    android.net.Uri SMS_URI -> a
    android.widget.EditText mobilePhone -> b
    android.widget.EditText validateCode -> c
    android.widget.Button loginButton -> d
    android.widget.Button validateCodeButton -> e
    com.parking.task.ILoginTask task -> f
    void onCreate(android.os.Bundle) -> onCreate
    void procGetLocalUserInfo(android.os.Message) -> procGetLocalUserInfo
    void onLogin(android.view.View) -> onLogin
    void procLogin(android.os.Message) -> procLogin
    void startMainUi(com.parking.User) -> a
    void onClickValidateCode(android.view.View) -> onClickValidateCode
    void procValidateCode(android.os.Message) -> procValidateCode
    void procWaitValidateCode(android.os.Message) -> procWaitValidateCode
com.parking.LoginActivity$1 -> com.parking.m:
    com.parking.LoginActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.parking.MainActivity -> com.parking.MainActivity:
    android.support.v4.app.FragmentTabHost mTabHost -> n
    com.parking.User currentUser -> o
    java.lang.Class[] fragmentArray -> p
    int[] mImageViewArray -> q
    void onCreate(android.os.Bundle) -> onCreate
    android.view.View getView(int) -> a
    void onTabChanged(java.lang.String) -> onTabChanged
com.parking.MainActivity$1 -> com.parking.n:
    com.xdlv.async.log.FileLogUtils val$logger -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.parking.MainFragment -> com.parking.o:
    int REQUEST_CODE_CAPTURE_CAMEIA -> Q
    com.parking.User user -> R
    android.widget.EditText allParkCount -> S
    android.widget.TextView todayCash -> T
    android.widget.Button editButton -> U
    com.parking.task.IMainTask task -> V
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    android.view.View createView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> c
    void onPause() -> g
    void procIncomeAndTotalNum(android.os.Message) -> procIncomeAndTotalNum
    void onClickOrderCreate(android.view.View) -> onClickOrderCreate
    void onActivityResult(int,int,android.content.Intent) -> a
    void procUpdateParkSlotNumber(android.os.Message) -> procUpdateParkSlotNumber
    void onLongClickAllCount(android.view.View) -> onLongClickAllCount
    void procEditAllCount(android.os.Message) -> procEditAllCount
com.parking.OrderFragment -> com.parking.p:
    android.widget.ListView orderList -> Q
    com.parking.OrderListAdaptor adaptor -> R
    int currentIndex -> S
    com.parking.task.IOrderTask task -> V
    com.parking.OrderListAdaptor$Filter type1 -> T
    com.parking.OrderListAdaptor$Filter type2 -> U
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    android.view.View createView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> c
    void onPause() -> g
    void procOrderList(android.os.Message) -> procOrderList
com.parking.OrderFragment$1 -> com.parking.q:
    boolean accept(com.parking.UserOrder) -> a
com.parking.OrderFragment$2 -> com.parking.r:
    boolean accept(com.parking.UserOrder) -> a
com.parking.OrderFragment$3 -> com.parking.s:
    com.parking.OrderFragment this$0 -> a
    void statusClick(android.view.View,com.parking.UserOrder) -> a
    com.parking.OrderFragment access$0(com.parking.OrderFragment$3) -> a
com.parking.OrderFragment$3$1 -> com.parking.t:
    com.parking.OrderFragment$3 this$1 -> a
    void postExecute() -> a
com.parking.OrderListAdaptor -> com.parking.u:
    com.parking.UserOrder[] allData -> a
    int resource -> b
    com.parking.OrderListAdaptor$Filter filter -> c
    java.text.SimpleDateFormat sdf -> d
    com.parking.OrderListAdaptor$StatusListener statusListener -> e
    java.util.Comparator comparator -> f
    void setData(java.util.List) -> a
    void refresh(com.parking.OrderListAdaptor$Filter) -> a
    void refresh() -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.parking.OrderListAdaptor$1 -> com.parking.v:
    int compare(com.parking.UserOrder,com.parking.UserOrder) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.parking.OrderListAdaptor$2 -> com.parking.w:
    com.parking.OrderListAdaptor this$0 -> a
    com.parking.UserOrder val$order -> b
    void onClick(android.view.View) -> onClick
com.parking.OrderListAdaptor$Filter -> com.parking.x:
    boolean accept(com.parking.UserOrder) -> a
com.parking.OrderListAdaptor$StatusListener -> com.parking.y:
    void statusClick(android.view.View,com.parking.UserOrder) -> a
com.parking.ParkingmBaseTask -> com.parking.z:
    java.lang.String host -> host
    com.lidroid.xutils.HttpUtils httpUtils -> httpUtils
    java.text.SimpleDateFormat sdf -> sdf
    org.json.JSONObject getJasonForServer(java.lang.String,java.lang.String[][]) -> getJasonForServer
    org.json.JSONObject getJasonForServer(java.lang.String,com.lidroid.xutils.http.RequestParams) -> getJasonForServer
    com.lidroid.xutils.http.RequestParams requestParams(java.lang.String[][]) -> requestParams
    long getTodayStartTime() -> getTodayStartTime
    void assertFlag(org.json.JSONObject,java.lang.String) -> assertFlag
    com.lidroid.xutils.DbUtils getDbUtils() -> getDbUtils
com.parking.PreView -> com.parking.PreView:
    android.hardware.Camera mCamera -> a
    void captureImage(android.hardware.Camera$PictureCallback) -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
com.parking.PreView$1 -> com.parking.aa:
    com.parking.PreView this$0 -> a
    void onShutter() -> onShutter
com.parking.TopView -> com.parking.TopView:
    android.graphics.Paint paint -> a
    android.graphics.Rect frame -> b
    int maskColor -> d
    int frameColor -> e
    int laserColor -> f
    int resultPointColor -> c
    int scannerAlpha -> g
    int[] SCANNER_ALPHA -> h
    long ANIMATION_DELAY -> i
    int POINT_SIZE -> j
    android.graphics.Rect rect(int,int) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
com.parking.User -> com.parking.ab:
    java.lang.String mobilePhone -> a
    int parkSlotNumber -> b
    float totalForYesterday -> c
    java.lang.String userName -> d
    java.lang.String authorizedName -> e
    java.lang.String idCardNumber -> f
    java.lang.String aliplay -> g
    java.lang.String weiXing -> h
    java.lang.String bankCard -> i
    float totalForToday -> j
    float totalForLastMonth -> k
    boolean login -> l
    long lastLoginTime -> m
    java.lang.String getMobilePhone() -> a
    void setMobilePhone(java.lang.String) -> a
    int getParkSlotNumber() -> b
    void setParkSlotNumber(int) -> a
    java.lang.String getUserName() -> c
    void setUserName(java.lang.String) -> b
    java.lang.String getAuthorizedName() -> d
    java.lang.String getIdCardNumber() -> e
    void setIdCardNumber(java.lang.String) -> c
    java.lang.String getAliplay() -> f
    void setAliplay(java.lang.String) -> d
    java.lang.String getWeiXing() -> g
    void setWeiXing(java.lang.String) -> e
    java.lang.String getBankCard() -> h
    void setBankCard(java.lang.String) -> f
    float getTotalForToday() -> i
    void setTotalForToday(float) -> a
    float getTotalForLastMonth() -> j
    void setTotalForLastMonth(float) -> b
    boolean isLogin() -> k
    void setLogin(boolean) -> a
    void setLastLoginTime(long) -> a
com.parking.UserOrder -> com.parking.ac:
    int orderId -> a
    java.lang.String mobilePhone -> b
    int feeType -> c
    float price -> d
    byte[] picData -> e
    int status -> f
    long createTime -> g
    long leavedTime -> h
    java.lang.String plateCode -> i
    float realPrice -> j
    double lng -> k
    double lat -> l
    android.graphics.Bitmap bitMap -> m
    int getOrderId() -> a
    void setOrderId(int) -> a
    java.lang.String getMobilePhone() -> b
    void setMobilePhone(java.lang.String) -> a
    int getFeeType() -> c
    void setFeeType(int) -> b
    float getPrice() -> d
    void setPrice(float) -> a
    int getStatus() -> e
    void setStatus(int) -> c
    long getCreateTime() -> f
    void setCreateTime(long) -> a
    byte[] getPicData() -> g
    void setPicData(byte[]) -> a
    void setBitMap(android.graphics.Bitmap) -> a
    android.graphics.Bitmap getBitMap() -> h
    java.lang.String getPlateCode() -> i
    void setPlateCode(java.lang.String) -> b
    long getLeavedTime() -> j
    void setLeavedTime(long) -> b
    float getRealPrice() -> k
    void setRealPrice(float) -> b
    double getLng() -> l
    void setLng(double) -> a
    double getLat() -> m
    void setLat(double) -> b
com.parking.task.AccountTask -> com.parking.a.a:
    android.os.Message queryUserInfo(int,int,java.lang.String) -> queryUserInfo
    android.os.Message quiteLogin(int,int,com.parking.User) -> quiteLogin
com.parking.task.BitMapUtil -> com.parking.a.b:
    android.graphics.Bitmap compressImage(java.lang.String) -> a
com.parking.task.CapturePicTask -> com.parking.a.c:
    android.os.Message procRawImage(int,int,byte[]) -> procRawImage
com.parking.task.CreateOrderTask -> com.parking.a.d:
    com.CarOCR.CarOCREngine engine -> engine
    com.xdlv.async.log.FileLogUtils logger -> logger
    android.os.Message getCurrentOrderMax(int,int,java.lang.String) -> getCurrentOrderMax
    android.os.Message createOrder(int,int,com.parking.UserOrder) -> createOrder
    android.os.Message reconizeNo(int,int,java.lang.String) -> reconizeNo
com.parking.task.IAccountTask -> com.parking.a.e:
    android.os.Message queryUserInfo(int,int,java.lang.String) -> queryUserInfo
    android.os.Message quiteLogin(int,int,com.parking.User) -> quiteLogin
com.parking.task.ICapturePicTask -> com.parking.a.f:
    android.os.Message procRawImage(int,int,byte[]) -> procRawImage
com.parking.task.ICreateOrderTask -> com.parking.a.g:
    android.os.Message getCurrentOrderMax(int,int,java.lang.String) -> getCurrentOrderMax
    android.os.Message createOrder(int,int,com.parking.UserOrder) -> createOrder
    android.os.Message reconizeNo(int,int,java.lang.String) -> reconizeNo
com.parking.task.IInputDialogTask -> com.parking.a.h:
    android.os.Message updateUserOrderStatus(int,int,com.parking.UserOrder) -> updateUserOrderStatus
    android.os.Message updateUserAccountName(int,int,com.parking.User) -> updateUserAccountName
    android.os.Message getOrderTimeAndFee(int,int,com.parking.UserOrder) -> getOrderTimeAndFee
com.parking.task.ILoginTask -> com.parking.a.i:
    android.os.Message getLocalUserInfo(int,int) -> getLocalUserInfo
    android.os.Message login(int,int,java.lang.String,java.lang.String) -> login
    android.os.Message getValidate(int,int,java.lang.String) -> getValidate
    android.os.Message waitValidateCode(int,int,int) -> waitValidateCode
com.parking.task.IMainTask -> com.parking.a.j:
    android.os.Message getIncomeAndTotalNum(int,int,java.lang.String) -> getIncomeAndTotalNum
    android.os.Message applyTotalNum(int,int,java.lang.String,int) -> applyTotalNum
    android.os.Message updateUserParkSlotNumber(int,int,com.parking.User) -> updateUserParkSlotNumber
com.parking.task.IOrderTask -> com.parking.a.k:
    android.os.Message getTodayOrder(int,int,java.lang.String) -> getTodayOrder
com.parking.task.InputDialogTask -> com.parking.a.l:
    android.os.Message updateUserOrderStatus(int,int,com.parking.UserOrder) -> updateUserOrderStatus
    android.os.Message updateUserAccountName(int,int,com.parking.User) -> updateUserAccountName
    android.os.Message getOrderTimeAndFee(int,int,com.parking.UserOrder) -> getOrderTimeAndFee
com.parking.task.LoginTask -> com.parking.a.m:
    android.os.Message getLocalUserInfo(int,int) -> getLocalUserInfo
    android.os.Message login(int,int,java.lang.String,java.lang.String) -> login
    android.os.Message getValidate(int,int,java.lang.String) -> getValidate
    android.os.Message waitValidateCode(int,int,int) -> waitValidateCode
com.parking.task.MainTask -> com.parking.a.n:
    android.os.Message getIncomeAndTotalNum(int,int,java.lang.String) -> getIncomeAndTotalNum
    android.os.Message applyTotalNum(int,int,java.lang.String,int) -> applyTotalNum
    android.os.Message updateUserParkSlotNumber(int,int,com.parking.User) -> updateUserParkSlotNumber
com.parking.task.OrderTask -> com.parking.a.o:
    android.os.Message getTodayOrder(int,int,java.lang.String) -> getTodayOrder
com.xdlv.async.log.FileLogUtils -> com.xdlv.async.a.a:
    java.lang.String TAG -> a
    java.text.SimpleDateFormat sdf -> b
    java.io.File logFile -> c
    java.lang.String tag -> d
    void init(java.lang.String,java.lang.String) -> a
    com.xdlv.async.log.FileLogUtils getInstance(java.lang.String) -> a
    void e(java.lang.String,java.lang.Throwable) -> a
    void flushFile(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.Throwable) -> a
com.xdlv.async.task.AsyncTask -> com.xdlv.async.task.a:
    int CPU_COUNT -> c
    int CORE_POOL_SIZE -> d
    int MAXIMUM_POOL_SIZE -> e
    java.util.concurrent.ThreadFactory sThreadFactory -> f
    java.util.concurrent.BlockingQueue sPoolWorkQueue -> g
    java.util.concurrent.Executor THREAD_POOL_EXECUTOR -> a
    java.util.concurrent.Executor SERIAL_EXECUTOR -> b
    com.xdlv.async.task.AsyncTask$InternalHandler sHandler -> h
    java.util.concurrent.Executor sDefaultExecutor -> i
    com.xdlv.async.task.AsyncTask$WorkerRunnable mWorker -> j
    java.util.concurrent.FutureTask mFuture -> k
    com.xdlv.async.task.AsyncTask$Status mStatus -> l
    java.util.concurrent.atomic.AtomicBoolean mCancelled -> m
    java.util.concurrent.atomic.AtomicBoolean mTaskInvoked -> n
    int[] $SWITCH_TABLE$com$xdlv$async$task$AsyncTask$Status -> o
    void postResultIfNotInvoked(java.lang.Object) -> c
    java.lang.Object postResult(java.lang.Object) -> d
    java.lang.Object doInBackground(java.lang.Object[]) -> a
    void onPreExecute() -> a
    void onPostExecute(java.lang.Object) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
    void onCancelled(java.lang.Object) -> b
    void onCancelled() -> b
    boolean isCancelled() -> c
    boolean cancel(boolean) -> a
    com.xdlv.async.task.AsyncTask executeOnExecutor(java.util.concurrent.ScheduledExecutorService,int,java.lang.Object[]) -> a
    void finish(java.lang.Object) -> e
    void access$0(com.xdlv.async.task.AsyncTask,java.lang.Object) -> a
    java.util.concurrent.atomic.AtomicBoolean access$1(com.xdlv.async.task.AsyncTask) -> a
    java.lang.Object access$2(com.xdlv.async.task.AsyncTask,java.lang.Object) -> b
    void access$3(com.xdlv.async.task.AsyncTask,java.lang.Object) -> c
    int[] $SWITCH_TABLE$com$xdlv$async$task$AsyncTask$Status() -> d
com.xdlv.async.task.AsyncTask$1 -> com.xdlv.async.task.b:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.xdlv.async.task.AsyncTask$2 -> com.xdlv.async.task.c:
    com.xdlv.async.task.AsyncTask this$0 -> a
    java.lang.Object call() -> call
com.xdlv.async.task.AsyncTask$3 -> com.xdlv.async.task.d:
    com.xdlv.async.task.AsyncTask this$0 -> a
    void done() -> done
com.xdlv.async.task.AsyncTask$AsyncTaskResult -> com.xdlv.async.task.e:
    com.xdlv.async.task.AsyncTask mTask -> a
    java.lang.Object[] mData -> b
com.xdlv.async.task.AsyncTask$InternalHandler -> com.xdlv.async.task.f:
    void handleMessage(android.os.Message) -> handleMessage
com.xdlv.async.task.AsyncTask$SerialExecutor -> com.xdlv.async.task.g:
    java.util.ArrayDeque mTasks -> a
    java.lang.Runnable mActive -> b
    void execute(java.lang.Runnable) -> execute
    void scheduleNext() -> a
com.xdlv.async.task.AsyncTask$SerialExecutor$1 -> com.xdlv.async.task.h:
    com.xdlv.async.task.AsyncTask$SerialExecutor this$1 -> a
    java.lang.Runnable val$r -> b
    void run() -> run
com.xdlv.async.task.AsyncTask$Status -> com.xdlv.async.task.i:
    com.xdlv.async.task.AsyncTask$Status PENDING -> a
    com.xdlv.async.task.AsyncTask$Status RUNNING -> b
    com.xdlv.async.task.AsyncTask$Status FINISHED -> c
    com.xdlv.async.task.AsyncTask$Status[] ENUM$VALUES -> d
    com.xdlv.async.task.AsyncTask$Status[] values() -> values
    com.xdlv.async.task.AsyncTask$Status valueOf(java.lang.String) -> valueOf
com.xdlv.async.task.AsyncTask$WorkerRunnable -> com.xdlv.async.task.j:
    java.lang.Object[] mParams -> b
com.xdlv.async.task.CommonTask -> com.xdlv.async.task.k:
    java.util.concurrent.ScheduledExecutorService exec -> c
    java.lang.Object handler -> g
    java.lang.Object bundle -> h
    int code -> d
    long createTime -> e
    boolean executed -> f
    com.xdlv.async.task.CommonTask execute(int,java.lang.Object[]) -> a
    android.os.Message obtainMessage(int,java.lang.Object) -> a
    void onPreExecute() -> a
    android.os.Message doInBackground(java.lang.Object[]) -> c
    android.os.Message execute2(java.lang.Object[]) -> d
    void onProgressUpdate(java.lang.Object[]) -> b
    void onPostExecute(android.os.Message) -> a
    void invokeMethod(java.lang.reflect.Method,java.lang.Object) -> a
    java.lang.reflect.Method getMethod(int,java.lang.Class) -> a
    void e(java.lang.String,java.lang.Throwable) -> a
    void i(java.lang.String,java.lang.Throwable) -> b
    void onPostExecute(java.lang.Object) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> a
com.xdlv.async.task.ITaskProxy -> com.xdlv.async.task.l:
    void cancle(int) -> cancle
com.xdlv.async.task.Post -> com.xdlv.async.task.Post:
    int[] value() -> value
com.xdlv.async.task.Pre -> com.xdlv.async.task.Pre:
    int[] value() -> value
com.xdlv.async.task.Proc -> com.xdlv.async.task.Proc:
    int[] value() -> value
com.xdlv.async.task.Prog -> com.xdlv.async.task.Prog:
    int[] value() -> value
com.xdlv.async.task.ProxyCommonTask -> com.xdlv.async.task.m:
    android.util.SparseArray codeMap -> codeMap
    android.app.Activity context -> context
    java.lang.Object handler -> handler
    java.lang.Object createTaskProxy(java.lang.Class,java.lang.Class,android.app.Activity,java.lang.Object) -> createTaskProxy
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void cancle(int) -> cancle
    android.os.Message obtainMessage(int,java.lang.Object) -> obtainMessage
    boolean filter(int) -> filter
    void preExecute(int) -> preExecute
    void postExecute(int) -> postExecute
com.xdlv.async.task.ProxyCommonTask$1 -> com.xdlv.async.task.n:
    com.xdlv.async.task.ProxyCommonTask this$0 -> g
    java.lang.reflect.Method val$method -> h
    void onPreExecute() -> a
    android.os.Message execute2(java.lang.Object[]) -> d
    void onPostExecute(android.os.Message) -> a
    com.xdlv.async.task.ProxyCommonTask access$0(com.xdlv.async.task.ProxyCommonTask$1) -> a
com.xdlv.async.task.ProxyCommonTask$1$1 -> com.xdlv.async.task.o:
    com.xdlv.async.task.ProxyCommonTask$1 this$1 -> a
    void run() -> run
com.xdlv.async.task.ProxyCommonTask$1$2 -> com.xdlv.async.task.p:
    com.xdlv.async.task.ProxyCommonTask$1 this$1 -> a
    void run() -> run
com.xdlv.async.task.Tar -> com.xdlv.async.task.Tar:
    java.lang.String[] value() -> value
